{
  
    
        "post0": {
            "title": "Title",
            "content": "L&#39;analisi delle componenti principali (principal component analysis o PCA) è una tecnica statistica di riduzione della multidimensionalità dei dati ampiamente utilizzata anche nell&#39;analisi dei mercati finanziari. In questo post andremo ad applicarla a un semplice portafoglio di ETF anche in una versione &quot;dinamica&quot;, avvalendoci della tecnica delle medie mobili esponenziali. . import numpy as np import pandas as pd import matplotlib.pyplot as plt import yfinance as yf # Rendiamo i grafici un po&#39; più carini plt.style.use(&#39;seaborn-darkgrid&#39;) . def normalize(series): return series.subtract(series.mean()).div(series.std()) def denormalize(series, mu, sd): return series.multiply(sd).add(mu) def format_pc(seq): return [f&#39;PC{n:02}&#39; for n, _ in enumerate(seq)] def df_dict(fun, seq): return {s: fun(s) for n, s in enumerate(seq)} def df_list(fun, seq): return [fun(s) for s in seq] def concat_dict(d): return pd.concat(d.values(), axis=0, keys=d.keys()) def dot(df1, df2): return df1.dot(df2.T) def dot3d(df1, df2): return df1.multiply(df2).sum(axis=1).unstack() def cov_matrix(df, norm, ewm, alpha=None): if ewm: if norm: return df.apply(normalize).ewm(alpha=alpha).cov() return df.ewm(alpha=alpha).cov() if norm: return df.apply(normalize).cov() return df.cov() def calc_variance(values): return (values / values.sum()).cumsum() def calc_pca(df): values, vectors = np.linalg.eig(df) return ( pd.Series(calc_variance(values), format_pc(df.index)), pd.DataFrame(vectors, format_pc(df.index), df.columns) ) def calc_ewm_pca(df): ans = df.fillna(0).groupby(level=0).apply(np.linalg.eig) def vectors(date): return pd.DataFrame( np.real(ans.loc[date][1]), format_pc(df.columns), df.columns ) def variance(date): return calc_variance(np.real(ans.loc[date][0])) dfs = df_dict(vectors, ans.index) return ( pd.DataFrame( df_list(variance, ans.index), ans.index, format_pc(df.columns) ), concat_dict(dfs) ) def calc_pc_returns(vectors, returns, norm): if not norm: return dot(returns, vectors) mu = dot(returns.mean(), vectors) sd = dot(returns.std(), vectors) return denormalize(dot(returns.apply(normalize), vectors), mu, sd) def calc_ewm_pc_returns(vectors, returns, norm): if not norm: return returns.T.apply(lambda c: vectors.xs(c.name).dot(c)).T mu = dot3d(vectors, returns.mean()) sd = dot3d(vectors, returns.std()) return denormalize(returns.apply(normalize).T.apply(lambda c: vectors.xs (c.name).dot(c)).T, mu, sd) . Scarichiamo le serie storiche di alcuni ETF di Vanguard, tra cui i quattro che suggerisce come &quot;mattoncini di base&quot; nel portfolio builder dedicato agli investitori americani. Aggiungiamo due ETF dedicati al real estate e alle commodities e scarichiamo anche la serie dei prezzi dell&#39;indice VIX, la volatilità del listino statunitense. . tickers = [ &#39;VTI&#39;, # Vanguard Total Stock Market &#39;VXUS&#39;, # Vanguard Total International Stock &#39;BND&#39;, # Vanguard Total Bond Market &#39;BNDX&#39;, # Vanguard Total International Bond &#39;VNQ&#39;, # Vanguard Real Estate Index Fund &#39;GSG&#39;, # iShares S&amp;P GSCI Commodity-Indexed Trust &#39;^VIX&#39; # Indice VIX ] data = yf.download(tickers=tickers, period=&#39;2y&#39;) prices = data.xs(&#39;Adj Close&#39;, axis=1, level=0) . [*********************100%***********************] 7 of 7 completed . Ribasiamo i prezzi dei nostri ETF a 100 e disegniamo un primo grafico per vederne l&#39;andamento storico. . rebased_prices = prices.iloc[:, :6].div(prices.iloc[0, :6]).mul(100) rebased_prices.plot(figsize=(20, 6), title=&#39;Andamento prezzi ETF ribasati negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); . Calcoliamo i rendimenti giornalieri delle serie storiche e la matrice di correlazione tra gli ETF. . returns = rebased_prices.pct_change() returns.corr() . BND BNDX GSG VNQ VTI VXUS . BND 1.000000 | 0.646752 | 0.056605 | 0.217327 | 0.187121 | 0.217059 | . BNDX 0.646752 | 1.000000 | 0.036933 | 0.288205 | 0.207281 | 0.238557 | . GSG 0.056605 | 0.036933 | 1.000000 | 0.380554 | 0.492745 | 0.500353 | . VNQ 0.217327 | 0.288205 | 0.380554 | 1.000000 | 0.857014 | 0.805494 | . VTI 0.187121 | 0.207281 | 0.492745 | 0.857014 | 1.000000 | 0.922180 | . VXUS 0.217059 | 0.238557 | 0.500353 | 0.805494 | 0.922180 | 1.000000 | . Per calcolare le componenti principali, è preferibile utilizzare una matrice di covarianza, a partire dai rendimenti standardizzati), ossia da serie con media nulla e varianza pari a 1. . covmat = cov_matrix(returns, True, False) . Il calcolo matriciale delle componenti principali prevede di trovare autovalori e autovettori della matrice di covarianza, qui calcoliamo già un vettore di autovalori cumulati, che andiamo poi a disegnare come grafico a barre. . variance, vectors = calc_pca(covmat) . Dal grafico possiamo vedere che la prima componente principale (PC00), spiega poco meno del 60% della varianza complessiva dei rendimenti degli indici, mentre la somma delle prime due componenti portano la varianza spiegata quasi all&#39;80%. Chiaramente, in questo portafoglio di 6 strumenti, la necessità di ridurre la dimensionalità è modesta, ma la tecnica è utile laddove ci siano decine o centinaia di indici o titoli per identificare le componenti principali da utilizzare poi per ulteriori analisi. . variance.plot.bar(figsize=(8, 6), title=&#39;Varianza cumulata spiegata dalle componenti principali&#39;); . A partire dalla matrice degli autovettori possiamo inoltre ricostruire i &quot;rendimenti&quot; delle componenti principali e i valori delle serie, come se fossero prezzi di serie finanziarie. Lo facciamo nel grafico successivo, ricordando che le prime due componenti principali sono rappresentate rispettivamente dalla linea blu e da quella arancio. . pc_returns = calc_pc_returns(vectors, returns, True) pc_prices = pc_returns.add(1).cumprod().multiply(100) pc_prices.plot(figsize=(20, 6), title=&#39;Andamento valori componenti principali negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); . Le componenti principali sono calcolate sul periodo di analisi e dipendono pertanto dalla finestra temporale scelta. Ci si potrebbe domandare: è possibile averne una versione dinamica, rolling che non dipenda da una finestra temporale fissa? Proviamo ad applicare la tecnica calcolando delle matrici di covarianza rolling con la metodologia delle medie mobili esponenziali, applicando un fattore di decadimento (alpha), pari a 0.06 - per ogni osservazione, il 94% deriva dal dato precedente e il 6% è introdotto sulla base del nuovo dato. Disegniamo poi il grafico della varianza spiegata dalla prima componente principale, mettendolo a confronto con l&#39;andamento dell&#39;indice VIX. . ewm_covmat = cov_matrix(returns, True, True, 0.06) . Interessante: la varianza spiegata dalla prima componente principale arriva fino a più dell&#39;80% (mentre l&#39;ultimo dato è al 50%) esattamente in coincidenza con il picco del VIX, ossia della correzione dei mercati di marzo 2020. Il che è in totale accordo con l&#39;ipotesi che la correlazione dei mercati e delle classi di attivi cresca nei momenti di maggiore volatilità e di correzione. . import warnings warnings.filterwarnings(&#39;ignore&#39;) ewm_variance, ewm_vectors = calc_ewm_pca(ewm_covmat) pd.concat([ewm_variance.iloc[20:, 0], prices.iloc[:, 6]], axis=1).plot(figsize=(8, 6), title=&#39;Confronto andamento prima PC e indice VIX&#39;, subplots=True); . Possiamo infine calcolare gli andamenti storici delle componenti principali, che saranno certamente differenti da quelle &quot;statiche&quot;; in particolare, la prima componente principale è sempre rappresentata in blu nel grafico. . ewm_pc_returns = calc_ewm_pc_returns(ewm_vectors, returns, False) ewm_pc_prices = ewm_pc_returns.add(1).cumprod().multiply(100) ewm_pc_prices.plot(figsize=(20, 6), title=&#39;Andamento valori componenti principali EW negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); .",
            "url": "https://marcobonifacio.github.io/blog/2021/05/26/analizzare-i-mercati-con-le-componenti-principali.html",
            "relUrl": "/2021/05/26/analizzare-i-mercati-con-le-componenti-principali.html",
            "date": " • May 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Prezzi e rendimenti con Pandas",
            "content": "Uno dei vantaggi di Nikola, lo static site generator che alimenta questo mio blog, è che permette di integrare direttamente dei notebook di Jupyter nei post. Per provare questa funzionalità, costruiamo un breve notebook su come gestire prezzi e rendimenti delle azioni con Pandas, in alternativa a Excel. In questo modo, potremo osservare in azione alcuni degli strumenti che ho descritto in un mio post precedente. . import pandas as pd import matplotlib.pyplot as plt import yfinance as yf # Modulo per lo scarico dei dati da Yahoo! Finance # Impostiamo uno stile dei grafici più elegante del default (secondo me!) plt.style.use(&#39;seaborn-darkgrid&#39;) . Scarichiamo da Yahoo! Finance i prezzi di quattro azioni statunitensi, identificate attraverso i loro ticker: Apple (AAPL), Microsoft (MSFT), McDonald&#39;s (MCD) e Coca-Cola (KO). Due azioni della new economy e due della old, come si diceva qualche anno fa. . tickers = &#39;AAPL MSFT MCD KO&#39; data = yf.download(tickers=tickers, period=&#39;2y&#39;) . [*********************100%***********************] 4 of 4 completed . A questo punto, eliminiamo dal database che abbiamo costruito i prezzi open, high, low e il volume negoziato per tenerci solo i prezzi di chiusura, rettificati dei dividendi eventualmente distribuiti e delle corporate action. . prices = data.xs(&#39;Adj Close&#39;, axis=1, level=0) # Vediamo gli ultimi dati così costruiti, per controllare che tutto sia corretto! prices.tail() . AAPL KO MCD MSFT . Date . 2021-06-16 130.149994 | 54.669998 | 235.580002 | 257.380005 | . 2021-06-17 131.789993 | 54.950001 | 233.880005 | 260.899994 | . 2021-06-18 130.460007 | 53.770000 | 229.619995 | 259.429993 | . 2021-06-21 132.300003 | 54.360001 | 232.899994 | 262.630005 | . 2021-06-22 133.979996 | 54.560001 | 233.880005 | 265.510010 | . Possiamo fare un primo grafico dell&#39;andamento dei prezzi delle quattro azioni negli ultimi due anni. . prices.plot(figsize=(8, 6), title=&#39;Andamento prezzi negli ultimi due anni&#39;); . Per avere la possibilità di confrontare i quattro grafici, ribasiamo i dati facendo partire gli andamenti da quota 100. . rebased_prices = prices.div(prices.iloc[0, :]).mul(100) rebased_prices.plot(figsize=(8, 6), title=&#39;Andamento prezzi ribasati negli ultimi due anni&#39;); . Passiamo ora ai rendimenti e calcoliamo i rendimenti mensili delle quattro azioni. . monthly_returns = prices.resample(&#39;M&#39;).last().pct_change() . Possiamo fare un grafico a barre dei rendimenti appena calcolati. . monthly_returns.plot.bar(figsize=(16, 6), title=&#39;Rendimenti percentuali per mese&#39;); . Possiamo facilmente invertire gli assi dei grafici (e notiamo come Apple sia stato il titolo più volatile negli ultimi due anni, ma Coca-Cola e McDonald&#39;s abbiano avuto i maggiori drawdown). . monthly_returns.T.plot.bar(figsize=(16, 6), title=&#39;Rendimenti percentuali mensili per titolo&#39;, legend=False); . Meglio ancora, possiamo separare graficamente i rendimenti mensili delle quattro azioni. . monthly_returns.plot.bar(figsize=(16, 6), title=&#39;Rendimenti percentuali mensili per titolo&#39;, subplots=True, layout=(2,2), sharey=True); . In sintesi, la prova può dirsi perfettamente riuscita e mostra le potenzialità di analisi esplorativa dei dati di Pandas, in grado in poche righe di codice di scaricare, elaborare e visualizzare le serie storiche con grande facilità. .",
            "url": "https://marcobonifacio.github.io/blog/jupyter/pandas/finanza/2021/05/06/prezzi-e-rendimenti-con-pandas.html",
            "relUrl": "/jupyter/pandas/finanza/2021/05/06/prezzi-e-rendimenti-con-pandas.html",
            "date": " • May 6, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://marcobonifacio.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://marcobonifacio.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://marcobonifacio.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://marcobonifacio.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}