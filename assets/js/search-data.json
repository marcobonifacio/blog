{
  
    
        "post0": {
            "title": "Prezzi e rendimenti con Pandas",
            "content": "fastpages, la piattaforma sulla quale è costruito questo blog, permette di integrare direttamente dei notebook di Jupyter nei post. Per provare questa funzionalità, costruiamo un breve notebook su come gestire prezzi e rendimenti delle azioni con Pandas, in alternativa a Excel. In questo modo, potremo osservare in azione alcuni degli strumenti che ho descritto in un mio post precedente. . import pandas as pd import altair as alt import yfinance as yf . Scarichiamo da Yahoo! Finance i prezzi di quattro azioni statunitensi, identificate attraverso i loro ticker: Apple (AAPL), Microsoft (MSFT), McDonald&#39;s (MCD) e Coca-Cola (KO). Due azioni della new economy e due della old, come si diceva qualche anno fa. . tickers = &#39;AAPL MSFT MCD KO&#39; data = yf.download(tickers=tickers, period=&#39;2y&#39;) . [*********************100%***********************] 4 of 4 completed . A questo punto, eliminiamo dal database che abbiamo costruito i prezzi open, high, low e il volume negoziato per tenerci solo i prezzi di chiusura, rettificati dei dividendi eventualmente distribuiti e delle corporate action. Vediamo le prime righe del database dei prezzi. . prices = data.xs(&#39;Adj Close&#39;, axis=1, level=0) prices.tail() . AAPL KO MCD MSFT . Date . 2021-06-17 131.789993 | 54.950001 | 233.880005 | 260.899994 | . 2021-06-18 130.460007 | 53.770000 | 229.619995 | 259.429993 | . 2021-06-21 132.300003 | 54.360001 | 232.899994 | 262.630005 | . 2021-06-22 133.979996 | 54.560001 | 233.880005 | 265.510010 | . 2021-06-23 133.729996 | 54.389999 | 233.725006 | 264.809998 | . Possiamo fare un primo grafico dell&#39;andamento dei prezzi delle quattro azioni negli ultimi due anni, utilizzando Altair, una libreria che permette di produrre grafici interattivi. . alt.Chart( prices.reset_index().melt( &#39;Date&#39;, var_name=&#39;Stock&#39;, value_name=&#39;Price&#39; ) ).mark_line().encode( x=&#39;Date:T&#39;, y=&#39;Price:Q&#39;, color=&#39;Stock:N&#39;, tooltip=[&#39;Stock&#39;, &#39;Price&#39;] ).properties( title=&#39;Andamento prezzi negli ultimi due anni&#39;, width=&#39;container&#39; ).interactive() . Per avere la possibilità di confrontare i quattro grafici, ribasiamo i dati facendo partire gli andamenti da quota 100. . rebased_prices = prices.div(prices.iloc[0, :]).mul(100) alt.Chart( rebased_prices.reset_index().melt( &#39;Date&#39;, var_name=&#39;Stock&#39;, value_name=&#39;Price&#39; ) ).mark_line().encode( x=&#39;Date:T&#39;, y=&#39;Price:Q&#39;, color=&#39;Stock:N&#39;, tooltip=[&#39;Stock&#39;, &#39;Price&#39;] ).properties( title=&#39;Andamento prezzi ribasati negli ultimi due anni&#39; ).interactive() . Passiamo ora ai rendimenti e calcoliamo i rendimenti mensili delle quattro azioni. . monthly_returns = prices.resample(&#39;M&#39;).last().pct_change() . Possiamo fare un grafico a barre dei rendimenti appena calcolati, divisi per mese. . alt.Chart( monthly_returns.reset_index().melt( &#39;Date&#39;, var_name=&#39;Stock&#39;, value_name=&#39;Return&#39; ) ).mark_bar().encode( y=&#39;Stock:N&#39;, x=&#39;Return:Q&#39;, color=&#39;Stock:N&#39;, row=&#39;Date:T&#39;, tooltip=[&#39;Stock&#39;, &#39;Return&#39;] ).properties( title=&#39;Rendimenti percentuali per mese&#39; ).interactive() . Oppure lo stesso grafico raggruppato per titolo, dove notiamo come Apple sia stato il titolo più volatile negli ultimi due anni, ma Coca-Cola e McDonald&#39;s abbiano avuto i maggiori drawdown. . alt.Chart( monthly_returns.reset_index().melt( &#39;Date&#39;, var_name=&#39;Stock&#39;, value_name=&#39;Return&#39; ) ).mark_bar().encode( x=&#39;Date:T&#39;, y=&#39;Return:Q&#39;, color=&#39;Stock:N&#39;, row=&#39;Stock:N&#39;, tooltip=[&#39;Stock&#39;, &#39;Return&#39;] ).properties( title=&#39;Rendimenti percentuali per mese&#39; ).interactive() . Ci fermiamo qui con questo post di prova, che mostra le potenzialità di analisi esplorativa di Pandas, in grado in poche righe di codice di scaricare, elaborare e visualizzare serie storiche di dati con grande facilità. .",
            "url": "https://marcobonifacio.github.io/blog/jupyter/pandas/finanza/2021/06/23/prezzi-e-rendimenti-con-pandas.html",
            "relUrl": "/jupyter/pandas/finanza/2021/06/23/prezzi-e-rendimenti-con-pandas.html",
            "date": " • Jun 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "L&#39;analisi delle componenti principali (principal component analysis o PCA) è una tecnica statistica di riduzione della multidimensionalità dei dati ampiamente utilizzata anche nell&#39;analisi dei mercati finanziari. In questo post andremo ad applicarla a un semplice portafoglio di ETF anche in una versione &quot;dinamica&quot;, avvalendoci della tecnica delle medie mobili esponenziali. . import numpy as np import pandas as pd import matplotlib.pyplot as plt import yfinance as yf # Rendiamo i grafici un po&#39; più carini plt.style.use(&#39;seaborn-darkgrid&#39;) . def normalize(series): return series.subtract(series.mean()).div(series.std()) def denormalize(series, mu, sd): return series.multiply(sd).add(mu) def format_pc(seq): return [f&#39;PC{n:02}&#39; for n, _ in enumerate(seq)] def df_dict(fun, seq): return {s: fun(s) for n, s in enumerate(seq)} def df_list(fun, seq): return [fun(s) for s in seq] def concat_dict(d): return pd.concat(d.values(), axis=0, keys=d.keys()) def dot(df1, df2): return df1.dot(df2.T) def dot3d(df1, df2): return df1.multiply(df2).sum(axis=1).unstack() def cov_matrix(df, norm, ewm, alpha=None): if ewm: if norm: return df.apply(normalize).ewm(alpha=alpha).cov() return df.ewm(alpha=alpha).cov() if norm: return df.apply(normalize).cov() return df.cov() def calc_variance(values): return (values / values.sum()).cumsum() def calc_pca(df): values, vectors = np.linalg.eig(df) return ( pd.Series(calc_variance(values), format_pc(df.index)), pd.DataFrame(vectors, format_pc(df.index), df.columns) ) def calc_ewm_pca(df): ans = df.fillna(0).groupby(level=0).apply(np.linalg.eig) def vectors(date): return pd.DataFrame( np.real(ans.loc[date][1]), format_pc(df.columns), df.columns ) def variance(date): return calc_variance(np.real(ans.loc[date][0])) dfs = df_dict(vectors, ans.index) return ( pd.DataFrame( df_list(variance, ans.index), ans.index, format_pc(df.columns) ), concat_dict(dfs) ) def calc_pc_returns(vectors, returns, norm): if not norm: return dot(returns, vectors) mu = dot(returns.mean(), vectors) sd = dot(returns.std(), vectors) return denormalize(dot(returns.apply(normalize), vectors), mu, sd) def calc_ewm_pc_returns(vectors, returns, norm): if not norm: return returns.T.apply(lambda c: vectors.xs(c.name).dot(c)).T mu = dot3d(vectors, returns.mean()) sd = dot3d(vectors, returns.std()) return denormalize(returns.apply(normalize).T.apply(lambda c: vectors.xs (c.name).dot(c)).T, mu, sd) . Scarichiamo le serie storiche di alcuni ETF di Vanguard, tra cui i quattro che suggerisce come &quot;mattoncini di base&quot; nel portfolio builder dedicato agli investitori americani. Aggiungiamo due ETF dedicati al real estate e alle commodities e scarichiamo anche la serie dei prezzi dell&#39;indice VIX, la volatilità del listino statunitense. . tickers = [ &#39;VTI&#39;, # Vanguard Total Stock Market &#39;VXUS&#39;, # Vanguard Total International Stock &#39;BND&#39;, # Vanguard Total Bond Market &#39;BNDX&#39;, # Vanguard Total International Bond &#39;VNQ&#39;, # Vanguard Real Estate Index Fund &#39;GSG&#39;, # iShares S&amp;P GSCI Commodity-Indexed Trust &#39;^VIX&#39; # Indice VIX ] data = yf.download(tickers=tickers, period=&#39;2y&#39;) prices = data.xs(&#39;Adj Close&#39;, axis=1, level=0) . [*********************100%***********************] 7 of 7 completed . Ribasiamo i prezzi dei nostri ETF a 100 e disegniamo un primo grafico per vederne l&#39;andamento storico. . rebased_prices = prices.iloc[:, :6].div(prices.iloc[0, :6]).mul(100) rebased_prices.plot(figsize=(20, 6), title=&#39;Andamento prezzi ETF ribasati negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); . Calcoliamo i rendimenti giornalieri delle serie storiche e la matrice di correlazione tra gli ETF. . returns = rebased_prices.pct_change() returns.corr() . BND BNDX GSG VNQ VTI VXUS . BND 1.000000 | 0.646752 | 0.056605 | 0.217327 | 0.187121 | 0.217059 | . BNDX 0.646752 | 1.000000 | 0.036933 | 0.288205 | 0.207281 | 0.238557 | . GSG 0.056605 | 0.036933 | 1.000000 | 0.380554 | 0.492745 | 0.500353 | . VNQ 0.217327 | 0.288205 | 0.380554 | 1.000000 | 0.857014 | 0.805494 | . VTI 0.187121 | 0.207281 | 0.492745 | 0.857014 | 1.000000 | 0.922180 | . VXUS 0.217059 | 0.238557 | 0.500353 | 0.805494 | 0.922180 | 1.000000 | . Per calcolare le componenti principali, è preferibile utilizzare una matrice di covarianza, a partire dai rendimenti standardizzati), ossia da serie con media nulla e varianza pari a 1. . covmat = cov_matrix(returns, True, False) . Il calcolo matriciale delle componenti principali prevede di trovare autovalori e autovettori della matrice di covarianza, qui calcoliamo già un vettore di autovalori cumulati, che andiamo poi a disegnare come grafico a barre. . variance, vectors = calc_pca(covmat) . Dal grafico possiamo vedere che la prima componente principale (PC00), spiega poco meno del 60% della varianza complessiva dei rendimenti degli indici, mentre la somma delle prime due componenti portano la varianza spiegata quasi all&#39;80%. Chiaramente, in questo portafoglio di 6 strumenti, la necessità di ridurre la dimensionalità è modesta, ma la tecnica è utile laddove ci siano decine o centinaia di indici o titoli per identificare le componenti principali da utilizzare poi per ulteriori analisi. . variance.plot.bar(figsize=(8, 6), title=&#39;Varianza cumulata spiegata dalle componenti principali&#39;); . A partire dalla matrice degli autovettori possiamo inoltre ricostruire i &quot;rendimenti&quot; delle componenti principali e i valori delle serie, come se fossero prezzi di serie finanziarie. Lo facciamo nel grafico successivo, ricordando che le prime due componenti principali sono rappresentate rispettivamente dalla linea blu e da quella arancio. . pc_returns = calc_pc_returns(vectors, returns, True) pc_prices = pc_returns.add(1).cumprod().multiply(100) pc_prices.plot(figsize=(20, 6), title=&#39;Andamento valori componenti principali negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); . Le componenti principali sono calcolate sul periodo di analisi e dipendono pertanto dalla finestra temporale scelta. Ci si potrebbe domandare: è possibile averne una versione dinamica, rolling che non dipenda da una finestra temporale fissa? Proviamo ad applicare la tecnica calcolando delle matrici di covarianza rolling con la metodologia delle medie mobili esponenziali, applicando un fattore di decadimento (alpha), pari a 0.06 - per ogni osservazione, il 94% deriva dal dato precedente e il 6% è introdotto sulla base del nuovo dato. Disegniamo poi il grafico della varianza spiegata dalla prima componente principale, mettendolo a confronto con l&#39;andamento dell&#39;indice VIX. . ewm_covmat = cov_matrix(returns, True, True, 0.06) . Interessante: la varianza spiegata dalla prima componente principale arriva fino a più dell&#39;80% (mentre l&#39;ultimo dato è al 50%) esattamente in coincidenza con il picco del VIX, ossia della correzione dei mercati di marzo 2020. Il che è in totale accordo con l&#39;ipotesi che la correlazione dei mercati e delle classi di attivi cresca nei momenti di maggiore volatilità e di correzione. . import warnings warnings.filterwarnings(&#39;ignore&#39;) ewm_variance, ewm_vectors = calc_ewm_pca(ewm_covmat) pd.concat([ewm_variance.iloc[20:, 0], prices.iloc[:, 6]], axis=1).plot(figsize=(8, 6), title=&#39;Confronto andamento prima PC e indice VIX&#39;, subplots=True); . Possiamo infine calcolare gli andamenti storici delle componenti principali, che saranno certamente differenti da quelle &quot;statiche&quot;; in particolare, la prima componente principale è sempre rappresentata in blu nel grafico. . ewm_pc_returns = calc_ewm_pc_returns(ewm_vectors, returns, False) ewm_pc_prices = ewm_pc_returns.add(1).cumprod().multiply(100) ewm_pc_prices.plot(figsize=(20, 6), title=&#39;Andamento valori componenti principali EW negli ultimi due anni&#39;, subplots=True, layout=(2, 3), sharey=True); .",
            "url": "https://marcobonifacio.github.io/blog/2021/05/26/analizzare-i-mercati-con-le-componenti-principali.html",
            "relUrl": "/2021/05/26/analizzare-i-mercati-con-le-componenti-principali.html",
            "date": " • May 26, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://marcobonifacio.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://marcobonifacio.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://marcobonifacio.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}